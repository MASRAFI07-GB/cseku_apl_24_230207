#include <bits/stdc++.h>
using namespace std;
struct ListNode
{
    int val;
    ListNode *next;
};


//print the list
void print(ListNode *&head)
{
    ListNode *current = head;
    while (current != NULL)
    {
        cout << current->val << " ";
        current = current->next;
    }
    cout << endl;
}


//rotate the list
ListNode *rotate(ListNode *&head, int k)
{

    if (head == NULL || k == 0)
        return head;
    if (head->next == NULL)
    {
        return head;
    }
    ListNode *current = head, *tail, *current1 = current;
    int flag = 0;
    while (current->next != NULL)
    {
        // cout<<"some"<<endl;
        current = current->next;
    }

    tail = current;
    while (k--)
    {
        ListNode *temp = tail;
        current1 = head;
        while (current1->next != tail)
        {
            current1 = current1->next;
        }

        temp->next = head;
        head = temp;
        tail = current1;
        tail->next = NULL;
    }

    return head;
}


// detect cycle
bool hasCycle(ListNode *head)
{
    if (head == NULL || head->next == NULL)
        return false;
    map<ListNode *, int> m;

    ListNode *current = head;
    while (1)
    {
        if (m[current] > 0)
        {
            return true;
        }
        else
            m[current]++;
        current = current->next;
        if (current == NULL)
            return false;
    }
}


// swapping two nodes
ListNode *swap_node(ListNode *&head, int k)
{
    if (head == NULL || head->next == NULL)
        return head;
    if (head->next->next == NULL)
    {
        ListNode *temp = head;
        head = head->next;
        head->next = temp;
        temp->next = NULL;
        return head;
    }

    int size = 0;
    ListNode *c10 = head;
    while (c10 != NULL)
    {
        size++;
        c10 = c10->next;
    }

    if (k == 1 || k == size)
    {
        ListNode *c, *c1, *c2, *temp = head;
        c = head;
        c2 = head;
        int flag = 0;
        while (temp->next != NULL)
        {
            temp = temp->next;
            if (flag == 1)
                c2 = c2->next;
            flag = 1;
        }

        c1 = temp;

        c1->next = c->next;
        c2->next = c;
        c->next = NULL;
        head = c1;
        return head;
    }

    int k1 = size - k + 1;
    if (k == k1)
        return head;

    ListNode *c1 = head, *c;
    c = head;
    int f1 = 0, f2 = 0;
    for (int i = 1; i < size; i++)
    {
        if (i == k)
        {
            f1 = 1;
        }
        if (f1 == 0)
            c = c->next;

        if (i == k1)
        {
            f2 = 1;
        }
        if (f2 == 0)
            c1 = c1->next;
    }

    ListNode *c2, *c3;
    c2 = head, c3 = head;
    int flag1 = 0, flag2 = 0;
    while (1)
    {
        if (c2->next == c)
            flag1 = 1;
        if (c3->next == c1)
            flag2 = 1;
        if (flag1 == 1 && flag2 == 1)
            break;
        if (flag1 == 0)
            c2 = c2->next;
        if (flag2 == 0)
            c3 = c3->next;
    }

    if (abs(k - k1) == 1)
    {
        ListNode *p, *q, *r;
        if (k1 > k)
        {
            p = c;
            q = c1;
            r = c2;
        }
        else
        {
            p = c1;
            q = c;
            r = c3;
        }
        r->next = q;
        p->next = q->next;
        q->next = p;
        return head;
    }

    ListNode *c4 = c->next;
    c->next = c1->next;
    c2->next = c1;
    c1->next = c4;
    c3->next = c;

    return head;
}

ListNode *Sort(ListNode *&head)
{
    ListNode *c, *destination = NULL;
    c = head;
    int cnt1 = 0, cnt2 = 0;
    bool x = false;
    while (1)
    {
        // cnt1++;
        // int x=5000;
        // while(x--)
        // cout<<"cnt1:"<<cnt1<<endl;
        // cout<<'1'<<endl;
        c = head;
        ListNode *c1 = c->next, *temp = head;
        int flag = 0;
        while (1)
        {
            // cnt2++;
            // cout<<"cnt2:"<<cnt2<<endl;
            // cout<<'2'<<endl;

            if (flag == 0)
            {
                if (c->val > c1->val)
                {
                    c->next = c1->next;
                    c1->next = c;
                    head = c1;
                    temp = head;
                    flag = 1;
                    c1 = c->next;
                }
            }
            else
            {
                if (c->val > c1->val)
                {
                    temp->next = c1;
                    c->next = c1->next;
                    c1->next = c;
                    c1 = c->next;
                    temp = temp->next;
                }
            }

            if (x == false)
            {

                if (c->next == NULL)
                {
                    x = true;
                    destination = c;
                    break;
                }
            }
            else
            {
                if (c->next == destination)
                {
                    destination = c;
                    break;
                }
            }
        }

        if (head->next == destination)
            break;
    }

    return head;
}


// reverse the list
ListNode *reverse(ListNode *&head)
{

    if (head == NULL || head->next == NULL)
        return head;

    ListNode *c, *destination = NULL;
    c = head;
    int cnt1 = 0, cnt2 = 0;
    bool x = false;
    while (1)
    {
        // cnt1++;
        // int x=5000;
        // while(x--)
        // cout<<"cnt1:"<<cnt1<<endl;
        // cout<<'1'<<endl;
        c = head;
        ListNode *c1 = c->next, *temp = head;
        int flag = 0;
        while (1)
        {
            // cnt2++;
            // cout<<"cnt2:"<<cnt2<<endl;
            // cout<<'2'<<endl;

            if (flag == 0)
            {
                c->next = c1->next;
                c1->next = c;
                head = c1;
                temp = head;
                flag = 1;
                c1 = c->next;
            }
            else
            {
                temp->next = c1;
                c->next = c1->next;
                c1->next = c;
                c1 = c->next;
                temp = temp->next;
            }

            if (x == false)
            {

                if (c->next == NULL)
                {
                    x = true;
                    destination = c;
                    break;
                }
            }
            else
            {
                if (c->next == destination)
                {
                    destination = c;
                    break;
                }
            }
        }

        if (head->next == destination)
            break;
    }

    return head;
}


//  deleting the nodes which has a node in its right side with a greater value of the node
ListNode *delete_node(ListNode *head)
{
    if (head == NULL || head->next == NULL)
        return head;
    ListNode *c = head, *tail, *c1 = c->next, *temp = head;
    int flag = 0;
    while (c->next != NULL)
    {
        c1 = c->next;
        int x = 0;
        while (c1 != NULL)
        {
            if (c1->val > c->val)
            {
                x = 1;
                if (c == head)
                {
                    head = head->next;
                    c = head;
                    temp = c;
                }
                else
                {
                    temp->next = c->next;
                    c = temp->next;
                }
                break;
            }

            c1 = c1->next;
        }

        if (x == 0)
        {
            c = c->next;
            if (flag == 1)
            {
                temp = temp->next;
            }
            flag = 1;
        }
    }
    return head;
}
int main()
{
    int n;
    cin >> n;
    ListNode *head, *tail, *current;
    head = new ListNode();
    int data;
    cin >> data;
    head->val = data;
    tail = head;
    tail->next = NULL;
    n--;
    while (n--)
    {
        int data;
        cin >> data;
        current = new ListNode();
        current->val = data;
        tail->next = current;
        tail = current;
        tail->next = NULL;
    }

    // head = reverse(head);
    print(head);
    head=delete_node(head);
    print(head);

    // swap two nodes
    // int k;
    // cin >> k;
    // head = swap_node(head, k);

    // find cycle
    // cout<<hasCycle(head);
    //  int k;
    //  cin>>k;
    //  head=rotate(head,k);
}

// 5
// 5 4 3 2 1
